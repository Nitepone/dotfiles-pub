#! /bin/bash
#
# auto-bspwmrc: Dynamic BSPWM display configuration.
#
# to install.. feh sxhkd nm-applet polybar edid-decode wmname picom
#
# Luna Hart <luna@night.horse>

# shellcheck disable=SC1090
source ~/.profile
export PATH=$HOME/.cargo/env:$PATH

REDIRECT="/dev/null"
if [[ -n "$DEBUG" || -n "$VERBOSE" ]]; then
	set -x
	REDIRECT="/dev/stdout"
fi

# Array of primary monitors. First match will be used.
X_PRIMARY=("eDP")

# Array of monitor order configs.
# string format: "[MONITOR1_OUTPUT] [MONITOR1_ORIENTATION] [MONITOR2_OUTPUT] [MONITOR2_ORIENTATION] ..."
X_ORDERED_CONFIGS=("eDP normal DisplayPort-0 normal" "eDP normal DisplayPort-1 normal" "eDP normal DisplayPort-2 normal" "eDP normal DisplayPort-3 normal")
XOC_PARAM_COUNT=2

# Array of edid modeline config strings.
# string format: "[EDID_MODEL] [XRANDR_MODELINE]"
EDID_MODE_CONFIG=("27GL850 2560x1440")

# Total desktops used by BSPWM
BSPWM_DESKTOP_COUNT=13
# Percentage (vs equal split) of desktops that will be given to primary monitor.
BSPWM_PRIMARY_DESKTOP_BIAS=120

function get_monitor_model_by_edid {
	local edid_path
	# XXX(luna) We should consider multiple "card" systems. Maybe a search.
	edid_path="/sys/class/drm/card0-${1}/edid"
	test -f "$edid_path" || return 1
	parse-edid < "${edid_path}" 2> /dev/null | grep ModelName | sed 's/.*"\(.*\)"/\1/'
	return 0
}

function try_edid_config {
	local output="$1"
	local config
	local model
	model="$(get_monitor_model_by_edid "$output" || return $?)"
	for config in "${EDID_MODE_CONFIG[@]}"; do
		IFS=" " read -r -a config <<< "$config"
		if [[ "${config[0]}" = "${model}" ]]; then
			echo "Matched edid profile for: $model($output)"
			xrandr --output "$output" --mode "${config[1]}"
			return $?
		fi
	done
	return 0
}

function get_display_idx {
	for i in "${!connected_displays[@]}"; do
		if [[ "${connected_displays[$i]}" = "${1}" ]]; then
			echo "${i}"
			return
		fi
	done
	return 1
}

# populates: "$target_displays"
# populates: "$config"
function try_match_display_config {
	local config_raw
	local config_displays
	# check configs for a matching one
	for config_raw in "${X_ORDERED_CONFIGS[@]}"; do
		IFS=" " read -r -a config <<< "$config_raw"

		# check if config matches current displays
		config_displays=()
		for ((i=0; i<${#config[@]}; i+=XOC_PARAM_COUNT)); do
			# add to list of config's displays
			config_displays+=("${config[i]}")
			# check if display not in connected array
			for i_display in "${connected_displays[@]}"; do
				if [[ "${i_display}" = "${config[i]}" ]]; then
					continue 2
				fi
			done
			continue 2
		done

		target_displays=("${config_displays[@]}")
		echo "Using config: $config_raw"
		return 0

	done

	# attempt failover, no config found
	>&2 echo "I see no friendly monitors... This is scary... *sniff*" 
	>&2 echo "Must.. Continue.. Using the first output I saw!"
	target_displays=("${connected_displays[0]}")
	echo "${connected_displays[0]} normal"
	return 0
}

function enumerate_displays {
	local config
	local config_displays
	local output
	local orientation
	local prev_output
	# vertical heights of displays by global idx
	local h_displays
	local max_h_displays
	local cur_dim
	local xpos
	local ypos
	local display_idx
	xpos=0
	ypos=0


	# populated "connected displays"
	mapfile -t connected_displays < <(xrandr --query | awk '/ connected /{print$1}')
	#con_mon=( "${connected_displays[@]}" )
	# initialize modes of connected displays based on edid
	for output in "${connected_displays[@]}"; do
		try_edid_config "${output}"
	done

	# populate connected display vertical height data
	# XXX(luna) think we might want to limit `max_h_displays` to those in config?
	mapfile -t h_displays < <(xrandr | grep "   .*\*" | sed -E "s/   ([0-9]*)x([0-9]*).*/\2/")
	IFS=$'\n'
	max_h_displays="$(echo "${h_displays[*]}" | sort -nr | head -n1)"
	unset IFS

	# get display config
	try_match_display_config

	# apply monitor order/orientation
	for ((i=0; i<${#config[@]}; i+=XOC_PARAM_COUNT)); do
		output="${config[i]}"
		orientation="${config[i+1]}"
		display_idx="$(get_display_idx "$output")"
		xpos=0
		ypos=$(( max_h_displays - h_displays[display_idx] ))
		# set display order if needed
		if ((i > 0)); then
			cur_dim="$(xdpyinfo | grep dimensions | sed -r 's/^[^0-9]*([0-9]+x[0-9]+).*$/\1/')"
			xpos=$(echo "$cur_dim" | sed -E 's/(.*)x.*/\1/')
			prev_output="${config[i-XOC_PARAM_COUNT]}"
			xrandr --output "$output" \
				--right-of "$prev_output"
		fi
		# set orientation of display
		xrandr --output "$output" \
			--rotate "$orientation"
	done

	# apply fine monitor position
	# 1. all displays are aligned at bottom (BSPWM bugs out otherwise)
	# 2. all displays are aligned alongside each other.
	for ((i=0; i<${#config[@]}; i+=XOC_PARAM_COUNT)); do
		output="${config[i]}"
		display_idx="$(get_display_idx "$output")"
		xpos=$(xrandr | grep "$output" | sed -E "s/.*\+([0-9]*)\+.*/\1/")
		ypos=$(( max_h_displays - h_displays[display_idx] ))
		xrandr --output "$output" \
			--pos "${xpos}x${ypos}"
	done
	
	return 0
}

# consumes: "$target_displays"
#           "$DP_HINT_PRIMARY"
function configure_bspwm_desktops {
	local primary
	local desktop_count

	# determine if we have a primary monitor attached
	for primary in "${X_PRIMARY[@]}"; do
		for i_display in "${target_displays[@]}"; do
			if [[ "${i_display}" = "$primary" ]]; then
				break 2
			fi
		done
		primary=""
	done

	# calculate desktop counts
	if [[ -z "$primary" ]]; then
		primary_desktop_count=0
		secondary_desktop_count=$((BSPWM_DESKTOP_COUNT/${#target_displays[@]}))
	else
		secondary_desktop_count=$(( ( (BSPWM_DESKTOP_COUNT / ${#target_displays[@]}) \
			* 100) / BSPWM_PRIMARY_DESKTOP_BIAS ))
		primary_desktop_count=$((BSPWM_DESKTOP_COUNT \
			- secondary_desktop_count * (${#target_displays[@]} - 1)))
	fi
	desktop_count=1

	# add desktops and configure for displays
	for display in "${target_displays[@]}"; do
		if [[ "$display" = "$primary" ]]; then
			next_desktop_count=$((desktop_count + primary_desktop_count))
		else
			next_desktop_count=$((desktop_count + secondary_desktop_count))
		fi
		bspc monitor "$display" -d $(seq --separator=" " \
			"$desktop_count" "$((next_desktop_count - 1))")
		export MONITOR="$display"
		polybar bottomright &> "$REDIRECT" &
		polybar bottomleft &> "$REDIRECT" &
		desktop_count="$next_desktop_count"
	done
}


# XXX(nitepone) So... We need to do this while using the Nvidia GPU driver.
#               For some absolutely inexplicable reason. Running these bspc
#               commands seems to cause the Nvidia driver to asyncronously
#               populate the monitors where bspwm expects them.
#               Without running these commands, `bspc query` will only output
#               a placeholder "MONITOR".
#               This will cause anything relating to monitor configuration to
#               fail miserably.
#               (Note, the NV driver makes logs about HDMI during the sleep)
xrandr --auto
bspc config remove_disabled_monitors true
bspc config remove_unplugged_monitors true
while [[ "$(bspc query -M --names)" == "MONITOR" ]]; do
	sleep 1
done

# close old wm supporting app instances
pkill polybar
pkill nm-applet
pkill sxhkd
pkill feh
pkill wmname
pkill picom

# autoconfigure bspwm desktops
xrandr --auto
enumerate_displays
configure_bspwm_desktops

# configure bspwm
bspc config focus_follows_pointer true
bspc config border_width         5
bspc config window_gap          14
bspc config split_ratio          0.52
bspc config borderless_monocle   true
bspc config gapless_monocle      true
bspc config remove_unplugged_monitors true
bspc config remove_disabled_monitors true
bspc config focused_border_color "#44A7C4"
bspc config active_border_color "#022F8E"
bspc config normal_border_color "#011847"
bspc rule -a TeamViewer state=floating
bspc rule -a Peek state=floating

# fixes issues with java programs in tiling WMs
export _JAVA_AWT_WM_NONREPARENTING=1

# fork/start useful things
#   network manager systray util
nm-applet > "$REDIRECT" &
#   hotkey daemon
sxhkd > "$REDIRECT" &
#   Java compatible wmname
wmname LG3D > "$REDIRECT" &
#   wallpaper
feh --bg-fill ~/.config/bspwm/background.png > "$REDIRECT" &
#   compositor
picom > "$REDIRECT" &

# configure xinput stuff
#   root cursor
xsetroot -cursor_name left_ptr
#   keyboard remapping
xmodmap -e "keycode 166 = Prior"
xmodmap -e "keycode 167 = Next"

if [[ -n "$DEBUG" || -n "$VERBOSE" ]]; then
	set +x
fi
